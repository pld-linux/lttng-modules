diff -ur lttng-modules-2.12.3/instrumentation/events/lttng-module/btrfs.h lttng-modules-2.12.3-256/instrumentation/events/lttng-module/btrfs.h
--- lttng-modules-2.12.3/instrumentation/events/lttng-module/btrfs.h	2021-02-06 21:03:51.283444240 +0100
+++ lttng-modules-2.12.3-256/instrumentation/events/lttng-module/btrfs.h	2021-02-06 21:03:58.556816159 +0100
@@ -220,7 +220,7 @@
 	)
 )
 
-#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 LTTNG_TRACEPOINT_EVENT(btrfs_get_extent,
 
@@ -267,7 +267,7 @@
 	)
 )
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 LTTNG_TRACEPOINT_EVENT(btrfs_get_extent,
 
@@ -288,7 +288,7 @@
 	)
 )
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0))
 LTTNG_TRACEPOINT_EVENT(btrfs_handle_em_exist,
@@ -1593,7 +1593,7 @@
 	TP_ARGS(fs_info, map, offset, size)
 )
 
-#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__chunk,
 
@@ -1666,7 +1666,7 @@
 	TP_ARGS(root, map, offset, size)
 )
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__chunk,
 
@@ -1701,7 +1701,7 @@
 	TP_ARGS(root, map, offset, size)
 )
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,14,0) || \
 	LTTNG_SLE_KERNEL_RANGE(4,4,73,5,0,0, 4,4,73,6,0,0) || \
@@ -1825,7 +1825,7 @@
 	TP_ARGS(fs_info, start, len)
 )
 
-#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__reserved_extent,
 
@@ -1885,7 +1885,7 @@
 	TP_ARGS(root, start, len)
 )
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__reserved_extent,
 
@@ -1914,7 +1914,7 @@
 	TP_ARGS(root, start, len)
 )
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,10,0) || \
 	LTTNG_KERNEL_RANGE(5,9,5, 5,10,0) || \
@@ -1994,7 +1994,7 @@
 	)
 )
 
-#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 LTTNG_TRACEPOINT_EVENT_MAP(find_free_extent,
 
@@ -2158,7 +2158,7 @@
 	TP_ARGS(fs_info, block_group, start, len)
 )
 
-#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__reserve_extent,
 
@@ -2270,7 +2270,7 @@
 	TP_ARGS(root, block_group, start, len)
 )
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0))
 LTTNG_TRACEPOINT_EVENT(btrfs_find_cluster,
diff -ur lttng-modules-2.12.3/instrumentation/events/lttng-module/kvm.h lttng-modules-2.12.3-256/instrumentation/events/lttng-module/kvm.h
--- lttng-modules-2.12.3/instrumentation/events/lttng-module/kvm.h	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/instrumentation/events/lttng-module/kvm.h	2021-02-06 21:03:58.556816159 +0100
@@ -101,14 +101,14 @@
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION(4,15,0) \
 	|| LTTNG_KERNEL_RANGE(4,14,14, 4,15,0) \
 	|| LTTNG_DEBIAN_KERNEL_RANGE(4,14,13,0,1,0, 4,15,0,0,0,0) \
-	|| LTTNG_KERNEL_RANGE(4,9,77, 4,10,0) \
+	|| LTTNG_KERNEL_RANGE(4,9,77, 4,11,0) \
 	|| LTTNG_KERNEL_RANGE(4,4,112, 4,5,0) \
 	|| LTTNG_KERNEL_RANGE(4,1,50, 4,2,0) \
 	|| LTTNG_KERNEL_RANGE(3,16,52, 3,17,0) \
 	|| LTTNG_UBUNTU_KERNEL_RANGE(3,13,11,144, 3,14,0,0) \
 	|| LTTNG_KERNEL_RANGE(3,2,97, 3,3,0) \
 	|| LTTNG_UBUNTU_KERNEL_RANGE(4,13,16,38, 4,14,0,0) \
-	|| LTTNG_DEBIAN_KERNEL_RANGE(4,9,65,0,3,0, 4,10,0,0,0,0) \
+	|| LTTNG_DEBIAN_KERNEL_RANGE(4,9,65,0,3,0, 4,11,0,0,0,0) \
 	|| LTTNG_FEDORA_KERNEL_RANGE(4,14,13,300, 4,15,0,0))
 
 LTTNG_TRACEPOINT_EVENT(kvm_mmio,
diff -ur lttng-modules-2.12.3/instrumentation/events/lttng-module/sched.h lttng-modules-2.12.3-256/instrumentation/events/lttng-module/sched.h
--- lttng-modules-2.12.3/instrumentation/events/lttng-module/sched.h	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/instrumentation/events/lttng-module/sched.h	2021-02-06 21:03:58.556816159 +0100
@@ -585,7 +585,7 @@
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,12,0) || \
-	LTTNG_RT_KERNEL_RANGE(4,9,27,18, 4,10,0,0) || \
+	LTTNG_RT_KERNEL_RANGE(4,9,27,18, 4,11,0,0) || \
 	LTTNG_RT_KERNEL_RANGE(4,11,5,1, 4,12,0,0))
 /*
  * Tracepoint for showing priority inheritance modifying a tasks
diff -ur lttng-modules-2.12.3/instrumentation/events/lttng-module/timer.h lttng-modules-2.12.3-256/instrumentation/events/lttng-module/timer.h
--- lttng-modules-2.12.3/instrumentation/events/lttng-module/timer.h	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/instrumentation/events/lttng-module/timer.h	2021-02-06 21:03:58.556816159 +0100
@@ -17,11 +17,11 @@
 
 #endif /* _TRACE_TIMER_DEF_ */
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 #define lttng_ktime_get_tv64(kt)	(kt)
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 #define lttng_ktime_get_tv64(kt)	((kt).tv64)
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 LTTNG_TRACEPOINT_EVENT_CLASS(timer_class,
 
diff -ur lttng-modules-2.12.3/instrumentation/events/lttng-module/writeback.h lttng-modules-2.12.3-256/instrumentation/events/lttng-module/writeback.h
--- lttng-modules-2.12.3/instrumentation/events/lttng-module/writeback.h	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/instrumentation/events/lttng-module/writeback.h	2021-02-06 21:03:58.556816159 +0100
@@ -389,7 +389,7 @@
 	LTTNG_KERNEL_RANGE(5,4,62, 5,5,0) || \
 	LTTNG_KERNEL_RANGE(4,19,143, 4,20,0) || \
 	LTTNG_KERNEL_RANGE(4,14,196, 4,15,0) || \
-	LTTNG_KERNEL_RANGE(4,9,235, 4,10,0) || \
+	LTTNG_KERNEL_RANGE(4,9,235, 4,11,0) || \
 	LTTNG_KERNEL_RANGE(4,4,235, 4,5,0) || \
 	LTTNG_UBUNTU_KERNEL_RANGE(4,15,18,119, 4,16,0,0))
 LTTNG_TRACEPOINT_EVENT(writeback_queue_io,
diff -ur lttng-modules-2.12.3/lib/ringbuffer/backend_types.h lttng-modules-2.12.3-256/lib/ringbuffer/backend_types.h
--- lttng-modules-2.12.3/lib/ringbuffer/backend_types.h	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/lib/ringbuffer/backend_types.h	2021-02-06 21:03:58.556816159 +0100
@@ -86,7 +86,7 @@
 	void *priv;			/* Client-specific information */
 	void *priv_ops;			/* Client-specific ops pointer */
 	void (*release_priv_ops)(void *priv_ops);
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 	struct lttng_cpuhp_node cpuhp_prepare;	/* CPU hotplug prepare */
 #else
 	struct notifier_block cpu_hp_notifier;	 /* CPU hotplug notifier */
diff -ur lttng-modules-2.12.3/lib/ringbuffer/frontend_types.h lttng-modules-2.12.3-256/lib/ringbuffer/frontend_types.h
--- lttng-modules-2.12.3/lib/ringbuffer/frontend_types.h	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/lib/ringbuffer/frontend_types.h	2021-02-06 21:03:58.556816159 +0100
@@ -53,7 +53,7 @@
 
 	unsigned long switch_timer_interval;	/* Buffer flush (jiffies) */
 	unsigned long read_timer_interval;	/* Reader wakeup (jiffies) */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 	struct lttng_cpuhp_node cpuhp_prepare;
 	struct lttng_cpuhp_node cpuhp_online;
 	struct lttng_cpuhp_node cpuhp_iter_online;
diff -ur lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_backend.c lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_backend.c
--- lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_backend.c	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_backend.c	2021-02-06 21:03:58.556816159 +0100
@@ -259,7 +259,7 @@
 	chanb->start_tsc = config->cb.ring_buffer_clock_read(chan);
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 /*
  * No need to implement a "dead" callback to do a buffer switch here,
@@ -291,7 +291,7 @@
 }
 EXPORT_SYMBOL_GPL(lttng_cpuhp_rb_backend_prepare);
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #ifdef CONFIG_HOTPLUG_CPU
 
@@ -341,7 +341,7 @@
 
 #endif
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 /**
  * channel_backend_init - initialize a channel backend
@@ -419,13 +419,13 @@
 		if (!chanb->buf)
 			goto free_cpumask;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		chanb->cpuhp_prepare.component = LTTNG_RING_BUFFER_BACKEND;
 		ret = cpuhp_state_add_instance(lttng_rb_hp_prepare,
 			&chanb->cpuhp_prepare.node);
 		if (ret)
 			goto free_bufs;
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 		{
 			/*
@@ -462,7 +462,7 @@
 			}
 #endif
 		}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	} else {
 		chanb->buf = kzalloc(sizeof(struct lib_ring_buffer), GFP_KERNEL);
 		if (!chanb->buf)
@@ -477,18 +477,18 @@
 
 free_bufs:
 	if (config->alloc == RING_BUFFER_ALLOC_PER_CPU) {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		/*
 		 * Teardown of lttng_rb_hp_prepare instance
 		 * on "add" error is handled within cpu hotplug,
 		 * no teardown to do from the caller.
 		 */
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 #ifdef CONFIG_HOTPLUG_CPU
 		put_online_cpus();
 		unregister_hotcpu_notifier(&chanb->cpu_hp_notifier);
 #endif
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		for_each_possible_cpu(i) {
 			struct lib_ring_buffer *buf =
 				per_cpu_ptr(chanb->buf, i);
@@ -517,15 +517,15 @@
 	const struct lib_ring_buffer_config *config = &chanb->config;
 
 	if (config->alloc == RING_BUFFER_ALLOC_PER_CPU) {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		int ret;
 
 		ret = cpuhp_state_remove_instance(lttng_rb_hp_prepare,
 				&chanb->cpuhp_prepare.node);
 		WARN_ON(ret);
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		unregister_hotcpu_notifier(&chanb->cpu_hp_notifier);
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	}
 }
 
diff -ur lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_frontend.c lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_frontend.c
--- lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_frontend.c	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_frontend.c	2021-02-06 21:03:58.556816159 +0100
@@ -453,7 +453,7 @@
 	buf->read_timer_enabled = 0;
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 enum cpuhp_state lttng_rb_hp_prepare;
 enum cpuhp_state lttng_rb_hp_online;
@@ -524,7 +524,7 @@
 }
 EXPORT_SYMBOL_GPL(lttng_cpuhp_rb_frontend_offline);
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #ifdef CONFIG_HOTPLUG_CPU
 
@@ -586,7 +586,7 @@
 
 #endif
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if defined(CONFIG_NO_HZ) && defined(CONFIG_LIB_RING_BUFFER)
 /*
@@ -692,7 +692,7 @@
 		 * concurrency.
 		 */
 #endif /* CONFIG_NO_HZ */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		{
 			int ret;
 
@@ -703,7 +703,7 @@
 				&chan->cpuhp_prepare.node);
 			WARN_ON(ret);
 		}
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		{
 			int cpu;
 
@@ -727,7 +727,7 @@
 			}
 #endif
 		}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	} else {
 		struct lib_ring_buffer *buf = chan->backend.buf;
 
@@ -856,7 +856,7 @@
 	init_waitqueue_head(&chan->hp_wait);
 
 	if (config->alloc == RING_BUFFER_ALLOC_PER_CPU) {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		chan->cpuhp_prepare.component = LTTNG_RING_BUFFER_FRONTEND;
 		ret = cpuhp_state_add_instance_nocalls(lttng_rb_hp_prepare,
 			&chan->cpuhp_prepare.node);
@@ -868,7 +868,7 @@
 			&chan->cpuhp_online.node);
 		if (ret)
 			goto cpuhp_online_error;
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		{
 			int cpu;
 			/*
@@ -904,7 +904,7 @@
 			}
 #endif
 		}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #if defined(CONFIG_NO_HZ) && defined(CONFIG_LIB_RING_BUFFER)
 		/* Only benefit from NO_HZ idle with per-cpu buffers for now. */
@@ -924,13 +924,13 @@
 
 	return chan;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 cpuhp_online_error:
 	ret = cpuhp_state_remove_instance_nocalls(lttng_rb_hp_prepare,
 			&chan->cpuhp_prepare.node);
 	WARN_ON(ret);
 cpuhp_prepare_error:
-#endif /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 error_free_backend:
 	channel_backend_free(&chan->backend);
 error:
diff -ur lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_iterator.c lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_iterator.c
--- lttng-modules-2.12.3/lib/ringbuffer/ring_buffer_iterator.c	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/lib/ringbuffer/ring_buffer_iterator.c	2021-02-06 21:03:58.556816159 +0100
@@ -335,7 +335,7 @@
 		list_add(&buf->iter.empty_node, &chan->iter.empty_head);
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 int lttng_cpuhp_rb_iter_online(unsigned int cpu,
 		struct lttng_cpuhp_node *node)
@@ -352,7 +352,7 @@
 }
 EXPORT_SYMBOL_GPL(lttng_cpuhp_rb_iter_online);
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #ifdef CONFIG_HOTPLUG_CPU
 static
@@ -384,7 +384,7 @@
 }
 #endif
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 int channel_iterator_init(struct channel *chan)
 {
@@ -401,13 +401,13 @@
 		if (ret)
 			return ret;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		chan->cpuhp_iter_online.component = LTTNG_RING_BUFFER_ITER;
 		ret = cpuhp_state_add_instance(lttng_rb_hp_online,
 			&chan->cpuhp_iter_online.node);
 		if (ret)
 			return ret;
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		{
 			int cpu;
 
@@ -436,7 +436,7 @@
 			}
 #endif
 		}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	} else {
 		buf = channel_get_ring_buffer(config, chan, 0);
 		lib_ring_buffer_iterator_init(chan, buf);
@@ -449,7 +449,7 @@
 	const struct lib_ring_buffer_config *config = &chan->backend.config;
 
 	if (config->alloc == RING_BUFFER_ALLOC_PER_CPU) {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 		{
 			int ret;
 
@@ -457,10 +457,10 @@
 				&chan->cpuhp_iter_online.node);
 			WARN_ON(ret);
 		}
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 		chan->hp_iter_enable = 0;
 		unregister_cpu_notifier(&chan->hp_iter_notifier);
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	}
 }
 
diff -ur lttng-modules-2.12.3/lttng-context-perf-counters.c lttng-modules-2.12.3-256/lttng-context-perf-counters.c
--- lttng-modules-2.12.3/lttng-context-perf-counters.c	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/lttng-context-perf-counters.c	2021-02-06 21:03:58.556816159 +0100
@@ -80,7 +80,7 @@
 {
 	struct perf_event **events = field->u.perf_counter->e;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 	{
 		int ret;
 
@@ -91,7 +91,7 @@
 			&field->u.perf_counter->cpuhp_prepare.node);
 		WARN_ON(ret);
 	}
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	{
 		int cpu;
 
@@ -103,14 +103,14 @@
 		unregister_cpu_notifier(&field->u.perf_counter->nb);
 #endif
 	}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	kfree(field->event_field.name);
 	kfree(field->u.perf_counter->attr);
 	lttng_kvfree(events);
 	kfree(field->u.perf_counter);
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 int lttng_cpuhp_perf_counter_online(unsigned int cpu,
 		struct lttng_cpuhp_node *node)
@@ -151,7 +151,7 @@
 	return 0;
 }
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 #ifdef CONFIG_HOTPLUG_CPU
 
@@ -210,7 +210,7 @@
 
 #endif
 
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 int lttng_add_perf_counter_to_ctx(uint32_t type,
 				  uint64_t config,
@@ -264,7 +264,7 @@
 		goto find_error;
 	}
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 	perf_field->cpuhp_prepare.component = LTTNG_CONTEXT_PERF_COUNTERS;
 	ret = cpuhp_state_add_instance(lttng_hp_prepare,
@@ -278,7 +278,7 @@
 	if (ret)
 		goto cpuhp_online_error;
 
-#else	/* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else	/* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 	{
 		int cpu;
 
@@ -304,7 +304,7 @@
 		put_online_cpus();
 		perf_field->hp_enable = 1;
 	}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 	field->destroy = lttng_destroy_perf_counter_field;
 
@@ -324,7 +324,7 @@
 	wrapper_vmalloc_sync_mappings();
 	return 0;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 cpuhp_online_error:
 	{
 		int remove_ret;
@@ -334,7 +334,7 @@
 		WARN_ON(remove_ret);
 	}
 cpuhp_prepare_error:
-#else	/* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else	/* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 counter_busy:
 counter_error:
 	{
@@ -349,7 +349,7 @@
 		unregister_cpu_notifier(&perf_field->nb);
 #endif
 	}
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 find_error:
 	lttng_remove_context_field(ctx, field);
 append_context_error:
diff -ur lttng-modules-2.12.3/lttng-cpuhotplug.h lttng-modules-2.12.3-256/lttng-cpuhotplug.h
--- lttng-modules-2.12.3/lttng-cpuhotplug.h	2020-10-05 22:03:52.000000000 +0200
+++ lttng-modules-2.12.3-256/lttng-cpuhotplug.h	2021-02-06 21:03:58.556816159 +0100
@@ -10,7 +10,7 @@
 
 struct lttng_cpuhp_node;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 #include <linux/cpuhotplug.h>
 
diff -ur lttng-modules-2.12.3/lttng-events.c lttng-modules-2.12.3-256/lttng-events.c
--- lttng-modules-2.12.3/lttng-events.c	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/lttng-events.c	2021-02-06 21:03:58.556816159 +0100
@@ -2908,7 +2908,7 @@
 }
 EXPORT_SYMBOL_GPL(lttng_transport_unregister);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 
 enum cpuhp_state lttng_hp_prepare;
 enum cpuhp_state lttng_hp_online;
@@ -3024,7 +3024,7 @@
 	cpuhp_remove_multi_state(lttng_hp_prepare);
 }
 
-#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 static int lttng_init_cpu_hotplug(void)
 {
 	return 0;
@@ -3032,7 +3032,7 @@
 static void lttng_exit_cpu_hotplug(void)
 {
 }
-#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)) */
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0)) */
 
 
 static int __init lttng_events_init(void)
diff -ur lttng-modules-2.12.3/lttng-events.h lttng-modules-2.12.3-256/lttng-events.h
--- lttng-modules-2.12.3/lttng-events.h	2021-02-06 21:03:51.283444240 +0100
+++ lttng-modules-2.12.3-256/lttng-events.h	2021-02-06 21:03:58.560149510 +0100
@@ -176,7 +176,7 @@
  * lttng_ctx_field because cpu hotplug needs fixed-location addresses.
  */
 struct lttng_perf_counter_field {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,11,0))
 	struct lttng_cpuhp_node cpuhp_prepare;
 	struct lttng_cpuhp_node cpuhp_online;
 #else
diff -ur lttng-modules-2.12.3/wrapper/vmalloc.h lttng-modules-2.12.3-256/wrapper/vmalloc.h
--- lttng-modules-2.12.3/wrapper/vmalloc.h	2020-10-05 22:04:55.000000000 +0200
+++ lttng-modules-2.12.3-256/wrapper/vmalloc.h	2021-02-06 21:03:58.556816159 +0100
@@ -38,7 +38,7 @@
   || LTTNG_KERNEL_RANGE(5,2,37, 5,3,0)            \
   || LTTNG_KERNEL_RANGE(4,19,113, 4,20,0)         \
   || LTTNG_KERNEL_RANGE(4,14,175, 4,15,0)         \
-  || LTTNG_KERNEL_RANGE(4,9,218, 4,10,0)          \
+  || LTTNG_KERNEL_RANGE(4,9,218, 4,11,0)          \
   || LTTNG_KERNEL_RANGE(4,4,218, 4,5,0))	  \
   || LTTNG_UBUNTU_KERNEL_RANGE(4,15,18,97, 4,16,0,0) \
   || LTTNG_UBUNTU_KERNEL_RANGE(5,0,21,48, 5,1,0,0)   \
@@ -135,7 +135,7 @@
   || LTTNG_KERNEL_RANGE(5,2,37, 5,3,0)            \
   || LTTNG_KERNEL_RANGE(4,19,113, 4,20,0)         \
   || LTTNG_KERNEL_RANGE(4,14,175, 4,15,0)         \
-  || LTTNG_KERNEL_RANGE(4,9,218, 4,10,0)          \
+  || LTTNG_KERNEL_RANGE(4,9,218, 4,11,0)          \
   || LTTNG_KERNEL_RANGE(4,4,218, 4,5,0))	  \
   || LTTNG_UBUNTU_KERNEL_RANGE(4,15,18,97, 4,18,0,0) \
   || LTTNG_UBUNTU_KERNEL_RANGE(5,0,21,48, 5,1,0,0)   \
